
  model {
    # Modelo para cada unidade observacional
    for (i in 1:N) {
      ## -- (verossimilhança)
        logit(nu[i]) <- ( beta_nu_0 + u_nu[ID[i]] ) +
                        beta_nu_AV * AV[i] + beta_nu_AV2 * pow(AV[i],2) +
                        beta_nu_PE[PEnum[i]] + beta_nu_GE[GEnum[i]]
      # -
        logit(mu[i]) <- ( beta_mu_0 + u_mu[ID[i]] ) +
                        beta_mu_AV * AV[i] + beta_mu_AV2 * pow(AV[i],2) +
                        beta_mu_PE[PEnum[i]] + beta_mu_GE[GEnum[i]]
      # -
        log(sigma[i]) <- beta_sg_0
      # -
        l[i] <- loggam(a[i]+b[i]) - loggam(a[i]) - loggam(b[i]) + 
          (a[i]-1) * log(y[i]) + (b[i]-1) * log(1-y[i])
        a[i] <- mu[i] * sigma[i]
        b[i] <- (1-mu[i]) * sigma[i]
        
        logLik[i] <- id[i] * log(nu[i]) + (1-id[i]) * ( log(1-nu[i]) + l[i] )
        Lik[i] <- exp(logLik[i])
        
        p[i] <- Lik[i] / 10000
        ones[i] ~ dbern(p[i])
    }
    
    # PRIORIS -----------------------------------------------------------------
    ## -- (priori dos efeitos fixos)
      beta_nu_0 ~ dnorm( 0.0, 0.0001 )
      beta_nu_AV ~ dnorm( 0.0, 0.0001 )
      beta_nu_AV2 ~ dnorm( 0.0, 0.0001 )
      #
      beta_mu_0 ~ dnorm( 0.0, 0.0001 )
      beta_mu_AV ~ dnorm( 0.0, 0.0001 )
      beta_mu_AV2 ~ dnorm( 0.0, 0.0001 )
      #
      beta_sg_0 ~ dnorm( 0.0, 0.0001 )
    #
      beta_nu_GE[6] <- 0
      beta_mu_GE[6] <- 0
      for (j in c(1:5,7:9)){
        beta_nu_GE[j] ~ dnorm( 0.0, 0.0001 )
        beta_mu_GE[j] ~ dnorm( 0.0, 0.0001 )  
      }
    #
      beta_nu_PE[1] <- 0
      beta_mu_PE[1] <- 0
      for (j in 2:4){
        beta_nu_PE[j] ~ dnorm( 0.0, 0.0001 )
        beta_mu_PE[j] ~ dnorm( 0.0, 0.0001 )  
      }
    ## -- (priori dos efeitos aleatórios)
    # Intercepto aleatório para cada indivíduo
      for( i in 1:nID ){
        u_nu[i] ~ dmnorm(0,omega_u_nu)
        u_mu[i] ~ dmnorm(0,omega_u_mu)
      }
      sigma_u_nu <- 1/omega_u_nu
      omega_u_nu ~ dgamma(0.01,0.01)
      # 
      sigma_u_mu <- 1/omega_u_mu
      omega_u_mu ~ dgamma(0.01,0.01)
  }